Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-02-15T10:34:48+10:00

**COCKPIT SSO**
https://cockpit-project.org/guide/149/sso.html
https://cockpit-project.org/guide/149/index.html
https://raw.githubusercontent.com/cockpit-project/cockpit/master/doc/cockpit-transport.png

**UID/GID RESERVATIONS**
https://systemd.io/UIDS-GIDS.html

**SSO ALTERNATIVE SETUP**
https://www.redhat.com/en/blog/i-really-cant-rename-my-hosts

**RESTRICT SSSD CONNECTION TO AD SERVERS**
https://access.redhat.com/solutions/4063701

**AD_ACCESS_FILTER**
# ldapsearch -H ldap://dc.ad.example.org -Y GSSAPI -N -b "dc=ad,dc=example,dc=org" "<value of ad_access_filter in sssd.conf>"

**ENTERPRISE PRINCIPAL**
02355097
We see this issue in this bugzilla that it's not a bug and the workaround is the one that Prasad has given:
https://bugzilla.redhat.com/show_bug.cgi?id=1310141

Enterprise principals are not supported in a IPA-AD trust scenario, but one can work around that by the following lines on the IPA server, tricking sssd into 'deriving' the UPN from the domain name.
	subdomain_inherit = ldap_user_principal
	ldap_user_principal = nosuchattr

With this workaround, even if the user has Siva.a.Saravanamuthu@CSLBEHRING.COM.CN in attribute userPrincipalName, sssd will instead use the domain part of the login: Siva.a.Saravanamuthu@CSLC1.CN 

Alternatively, on most systems you can use the following on the IPA server only:
[domain/EXAMPLE.COM]
subdomain_inherit = ldap_user_principal, ignore_group_members
ldap_user_principal = nosuchattr
ignore_group_members = True

**ERROR: s2n exop request failed**
- In sssd.conf, check the following are not set, this removes the domain part of the user/group name
   full_name_format = %1$s
- The uid/gid of AD user/groups are not duplicated or conflicting in the local system or IPA 
- Check that the server is not using short names which is not supported

**DUMP CACHE CONTENT**
# yum install ldb-tools
# ldbsearch -H /var/lib/sss/db/cache_<domainname>.ldb > /tmp/SSSD-Cache-client.txt

**PAM TO SSSD**
pam auth → auth_provider
pam account → access_provider
pam password → chpass_provider

**TIMEOUTS**
ldap_opt_timeout = 8
dns_resolver_timeout = 4
dns_resolver_op_timeout = 2
dns_resolver_server_timeout = 1
As you can see, the time outs would nicely stack atop one another
and allow at least two iterations of every outer loop.

Putting all the requests and their time outs together we get:
  1.  -> sdap_connect_send(): Can run up to ldap_opt_timeout seconds
  2.   -> be_resolve_server_send()
  3.      -> fo_resolve_service_send(): Can run up to dns_resolver_timeout seconds
  4.         - get next server from list:
				- no next server? Error
  5.         - resolve_srv(): Can run up to dns_resolver_op_timeout seconds
  6.           - try each DNS server up to 2 seconds
  7.         - resolve_hostname():  Can run up to dns_resolver_op_timeout seconds
  8.           - try each DNS server up to 2 seconds
  9.         - resolved hostname?
 10.           - ok: return
 11.           - not ok: goto 4
 12.      <- ip_address = fo_resolve_service_send()
 13.  <- ip_address = be_resolve_server_recv()
 14.   - no more servers? Go offline
 15.   - try_to_connect(ip_address)
 16.      - ok: done
 17.      - not ok: goto 2.
 18. <- sdap_connect_recv()

**GROUP IDs**
ldap_id_mapping = false
  primary group is read from the gidNumber LDAP attribute
ldap_id_mapping = true
  primary group is read from the primaryGroupID LDAP attribute

**SSSD LOG FLOW**
**1) ldap_child.log** 
- performs "kinit -k computerobject$"
**2) krb5_child.log** 
- performs "kinit user@REALM"
- id command successful but login fail
- errors "Preauthentication failed" or "Decrypt integrity check failed"

AD SITES
[domain/EXAMPLE.NET]
ad_site = MWDC
# dig -t SRV _ldap._tcp.MWDC._sites.nam.nsroot.net

**SSSCTL TOOLS**
# sssctl domain-status ipadomain.local
# sss_cache -E

**SSSD + SAMBA NOTES**
https://lists.fedoraproject.org/archives/list/sssd-users@lists.fedorahosted.org/message/HSOPA6J7AKUFHPLM2MA6T3P3SJN7TFNW/

**SSSD-AD MULTI-DOMAIN SUPPORT**
UNSUPPORTED
https://access.redhat.com/solutions/3528091

SUPPORTED
https://access.redhat.com/solutions/2710131

**DYNDNS UPDATE**
dns_resolver_op_timeout = 30
lookup_family_order = ipv4_only

**NET ADS** = Tool for CIFS administration in Linux(smb.conf) uses winbind to connect to AD.
**ADCLI** = Tool for joining a machine to AD, creates keytab. Does not configure auth such as SSSD.
**REALMD** = Tool released in RHEL 7, used by SSSD to configure auth and domain membership.

**REALMD**
https://access.redhat.com/solutions/1350723
realmd - a tool interface that uses backend programs such as:
→ adcli - (1)creates a computer account, (2)sets up keytab, (3)does not configure authentication, (4)uses LDAP, KRB,no SMB1
→ winbind
realmd - is used by sssd to enrol hosts to AD/IPA realms

**NET ADS**
(1)Part of Samba package. A tool to administer Samba and remote CIFS servers, for example AD server
(2)Uses SMB1 protocol

# dig SRV _ldap._tcp.domain.example.com. for Identity Management records
# dig SRV _ldap._tcp.dc._msdcs.domain.example.com. for Active Directory records

**SSSD 1.9 and later versions support AD Trust**
**PRE-REQUISITES**
https://access.redhat.com/solutions/1364713   Required Ports
# dig -t SRV _ldap._tcp.ad.lab.example.net
# dig -t SRV _ldap._tcp.dc._msdcs.ad.lab.example.net
# ntpd
# firewall-cmd 

**CROSS-FOREST AUTH (DIRECT INTEGRATION)**
https://access.redhat.com/solutions/3528091

**TOKEN GROUPS (GROUP DISCOVERY - MULTILEVEL)**
+ tokenGroups is enabled by default in SSSD but can be disabled by config
+ SSSD auto-discovers GC(Global Catalog) but will fallback to LDAP if it fails to find any
+ tokenGroups require GC to be Enabled in WINDOWS. Verify with the command below:
# kinit -k 'REDHAT1$@DOMAIN.LOCAL'
# ldapsearch   -Y GSSAPI -H ldap://adserver1.domain.local -b 'CN=Test User,OU=Benutzer normal,OU=Benutzer,DC=domain,DC=local' -s base tokenGroupsNoGCAcceptable
https://bugzilla.redhat.com/show_bug.cgi?id=1432982

**Restrict the set of groups the user is a member of with SSSD**
https://jhrozek.wordpress.com/2016/12/09/restrict-the-set-of-groups-the-user-is-a-member-of-with-sssd/

**SUBDOMAINS PROVIDER**
+ Default: The value of “id_provider” is used if it is set
+ Is used in Multi-domain setup
+ Set ldap_id_mapping = True
+ domains = rhev.gsslab.bne.redhat.com 
You only need the domain that the machine is joined to, if not you have to add a separate domain section

**SUBDOMAIN DISCOVERY**
1) In 1.14 and below, subdomain discovery is disabled;
- If [domain/group1] is not equal to DNS domain name of the host [internal.example.com], sssd will ignore [domain/group1] and will use [internal.example.com]

2) In 1.15 and above, subdomain discovery is enabled; 
- sssd will will auto-discover all subdomains - this is prone to SID conflicts. To narrow down the discovery to a single domain [group1] you will need the following: 

[domain/group1]
ad_domain = internal.example.com <<-- Optional. Add if dns is not set
ad_enabled_domains = group1

**RESTRICT USER GROUP LOOKUP**
https://jhrozek.wordpress.com/2016/12/09/restrict-the-set-of-groups-the-user-is-a-member-of-with-sssd/

**ACCESS PROVIDERS**
https://docs.pagure.org/SSSD.sssd/design_pages/active_directory_access_control.html

access_provider = simple
simple_allow_users = user1, user2 OR
simple_allow_groups = admins  
NOTE: Above config will work on Nested Groups

access_provider = ldap
ldap_access_filter =  (&(memberOf=cn=admins,ou=groups,dc=example,dc=com)(unixHomeDirectory=*)) 
ldap_access_order = filter, expire <<-- check expiration
NOTE: Above config will NOT work on Nested Groups but rather direct membership only as specified in the User ldap attributes

access_provider = ad
ad_access_filter = (&(memberOf=cn=admins,ou=groups,dc=example,dc=com)(unixHomeDirectory=*)

**AD PROVIDER SSSD EXAMPLE CONFIG**
https://docs.pagure.org/SSSD.sssd/users/ad_provider.html

**AD INTEGTRATION RESTRICT TO SPECIFIC AD**
https://docs.pagure.org/SSSD.sssd/design_pages/subdomain_configuration.html

**AD INTEGRATION MUTIPLE UNTRUSTED DOMAINS**
https://access.redhat.com/solutions/3073511

**PACKAGES** IN **DIRECT INTEGRATION**
SSSD — realmd
NATIVE LDAP, KRB PAM, and NSS - nss_ldap, pam_ldap, pam_krb5
SAMBA WINBIND -realmd

**RE-JOIN HOST TO AD**
1. Leave the domain from the RHEL machine:
  # net ads leave

2. Clear SSSD and uninstall the service:
  # systemctl stop sssd ; rm -rf /var/log/sssd/* /var/lib/sss/{db,mc}/*
  # yum remove sssd

3. Move the Keytab
  # mv /etc/krb5.keytab /etc/krb5.keytab.old_$(date +%F)

4. Delete the computer object from Active Directory.

5. Use RealmD to join to the domain:
  # yum install realmd sssd
  # realm join eliane.net

**REALMD JOIN**
https://www.freedesktop.org/software/realmd/docs/guide-active-directory-join.html

**AD INTEGRATION (SSSD ONLY) **
https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/windows_integration_guide/ch-configuring_authentication
AD Unix Attributes enabled
# yum install realmd oddjob oddjob-mkhomedir sssd adcli krb5-workstation
# realm discover ad.server
# realm join ad.server
# realm permit --realm ad.server --all
# id user@adexample.com


**AD INTEGRATION (SSSD + AD AUTH)**
AD Unix Attributes disabled
https://access.redhat.com/solutions/1755013
# rpm -q systemd && yum install chrony sssd samba-common-tools krb5-workstation 
# yum install ntp sssd samba-common krb5-workstation
# net ads join -k -S ad1.example.com
# authconfig --enablesssd --enablesssdauth --enablelocauthorize --enablemkhomedir --update

https://access.redhat.com/solutions/2638981

**TRADITIONAL KRB5 AND LDAP**
AUTHCONFIG 
# NSS Config (DB MAPS)
nss_ldap is enabled
LDAP+TLS is enabled
LDAP server = "ldap://ldap.mydomain.local"
LDAP base DN = "dc=mydomain,dc=local"
# KRB5 (Authentication)
pam_krb5 is enabled
krb5 realm = "MYDOMAIN.LOCAL"
krb5 realm via dns is disabled
krb5 kdc = "kdc.mydomain.local"
krb5 kdc via dns is disabled
krb5 admin server = "kdc.mydomain.local"
# LDAP (Identity)
LDAP+TLS is enabled
LDAP server = "ldap://ldap.mydomain.local"
LDAP base DN = "dc=mydomain,dc=local"

**SSSD + NATIVE LDAP**
http://manageiq.org/docs/reference/fine/auth/ldap
[domain/default]
auth_provider = ldap
chpass_provider = none
id_provider = ldap
case_sensitive = False
ldap_uri = ldaps://mdsemp-rnd.pncint.net
ldap_search_base = ou=linux,ou=trustedapplications,ou=frameworksystems,o=pnc?subtree??ou=employees,ou=people,o=pnc?subtree?
ldap_netgroup_search_base = ou=netgroups,o=pnc
ldap_group_search_base = ou=linux,ou=Groups,o=pnc
ldap_group_member = member
ldap_schema = rfc2307bis
ldap_default_bind_dn = cn=lhce001a-hostid,ou=amm,ou=TrustedApplications,ou=FrameworkSystems,o=pnc
ldap_default_authtok = ********
ldap_user_fullname = displayName
ldap_user_member_of = groupMembership
ldap_tls_reqcert = never
ldap_tls_cacertdir = /etc/openldap/cacerts
ldap_pwd_policy = shadow
ldap_account_expire_policy = shadow
ldap_network_timeout = 30
ldap_search_timeout = 30
# ignore_group_members = true
ldap_access_order = expire, filter

**LDAPSEARCH OVER TLS**
# LDAPTLS_CACERT=/etc/openldap/certs/pcar02.cer ldapsearch -H ldaps://devadpa.vanguard.com:636 -b "dc=vanguard,dc=com" -s base -D "CN=AUTS03D,OU=Application,OU=Dev_Test_Service_Accounts,OU=Auth1,OU=Control_Zone,dc=vanguard,dc=com" -W -d 1

# LDAPTLS_CACERTDIR=/etc/openldap/certs LDAPTLS_CERT=pcar02 ldapsearch -H ldaps://devadpa.vanguard.com:636 -b "dc=vanguard,dc=com" -s base -D


**COMPATABILITY MATRIX**
https://access.redhat.com/solutions/460343

**CONFIGS NOTABLE**
use_fully_qualified_names = true / false

**SYSTEMD**
/etc/systemd/system/multi-user.target.wants/sssd.service
[Unit]
Description=System Security Services Daemon
# SSSD must be running before we permit user sessions
Before=systemd-user-sessions.service nss-user-lookup.target
Wants=nss-user-lookup.target
After=network.target

[Service]
Environment=DEBUG_LOGGER=--logger=files
EnvironmentFile=-/etc/sysconfig/sssd
ExecStart=/usr/sbin/sssd -i ${DEBUG_LOGGER}
Type=notify
NotifyAccess=main
PIDFile=/var/run/sssd.pid

[Install]
WantedBy=multi-user.target

**SSS_OVERRIDE**
https://access.redhat.com/solutions/1365193

**TROUBELSHOOTING**
https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/deployment_guide/sssd-troubleshooting

# yum install sssd-tools
# sssctl -h
Add in [[/etc/sssd/sssd.conf]]
[sssd]
services=ifp

LOG FILES
# kinit -k COMPUTEROBJECT$
/var/log/sssd/ldap_child.log

# kinit user@REALM
/var/log/sssd/krb5_child.log

# CHANGE CACHE NAME
default_ccache_name = FILE:/tmp/krb5cc_%{uid}

SSSD DEBUG OUTPUT
# sssd -id7D

CLEAR CACHE and RUN ID
# sss_cache -E; date gthimm001c@cable.comcast.com; date

CACHE CLEAR
# systemctl stop sssd; rm -rf /var/lib/sssd/db/*; systemctl start sssd	

CACHE AND LOGS CLEAR
# systemctl stop sssd;rm -rf /var/lib/sss/db/*;rm -rf /var/log/sssd/*;systemctl start sssd

CACHE QUERY
# ldbsearch -H /var/lib/sss/db/cache_bne.com.ldb > /tmp/out2

# cd /var/lib/sss/db
# strings cache_PROD.MAIN.NTGOV.ldb | grep -i unix

VERIFY / SET SSSD IS USED TO ACCESS SMB SHARES
# alternatives --list | grep -E cifs\|libwbclient
# alternatives --set cifs-idmap-plugin /usr/lib/cifs-utils/idmapwb.so

CREATE LOG TARBALL
# tar czvf /tmp/sssd-debug$(hostname -s)$(date +%F_%H%M%S).tar.gz /etc/{sssd,nsswitch*,krb5.conf,samba,pam.d} /var/log/{secure,messages,sssd}

# tar czvf /tmp/sssd-debug$(hostname -s)$(date +%F_%H%M%S).tar.gz  /var/log/{secure,messages,sssd}


LDAP AUTH ERROR DEFINITION
https://confluence.atlassian.com/stashkb/ldap-error-code-49-317195698.html

GETENT
# getent passwd -s files oracle
# getent passwd -s sss oracle
# getent passwd -s sss user@example.com
# getent group -s sss user@example.com


**CONSIDERATIONS**
If your SSSD clients are directly joined to an Active Directory domain, perform this procedure on all the clients.
In this setup, restricting the Active Directory domain controllers (DCs) or sites also configures the SSSD clients to connect to a particular server or site for authentication.

If your SSSD clients are in an Identity Management domain that is in a trust with Active Directory, perform this procedure only on the Identity Management server.

In this setup, restricting the Active Directory DCs or sites does not configure the Identity Management clients to connect to a particular server or site for authentication. Although trusted Active Directory users and groups are resolved through Identity Management servers, authentication is performed directly against the Active Directory DCs. As of Red Hat Enterprise Linux 7.4, you can restrict authentication by defining the required Active Directory DCs in the /etc/krb5.conf file on the clients.

